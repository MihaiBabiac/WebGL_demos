<html>
<head>

<meta content="text/html;charset=utf-8" http-equiv="Content-Type">
<meta content="utf-8" http-equiv="encoding">

<title> Multiverse </title>

<script id="shader-fs" type="x-shader/x-fragment">
	
	precision highp float;

	#define MAX_IT 256
	#define MAX_IT_FLOAT 20.0
	
	
	varying vec2 vTextureCoord;

	uniform vec2 uTranslate;
	uniform float uZoom;
	uniform float uAR;
	
	vec2 complez_square(vec2 num)
	{
		return vec2(num.x*num.x-num.y*num.y, 2.0*num.x*num.y);
	}
	
	void main(void) {
		//vec4 texColor = texture2D(uSampler, vTextureCoord);
		float iterations = 0.0;
		vec2 c = vTextureCoord;
		c += uTranslate*uZoom;
		c /= uZoom;
		c.x *= uAR;
		vec2 z = vec2 (0.0, 0.0);
		bool done = false;
		gl_FragColor = vec4(0.86, 0.0, 0.0, 1.0);
		for(int i = 0; i < MAX_IT; i++)
		{
			done = done || length(z) > 4.0;
			if(!done)
			{
				iterations++;
				z = complez_square(z) + c;
			}
		}
		/*for(int i = 0; i < MAX_IT; i++)
		{
			done = done || length(z) > 2.0;
			if(!done)
			{
				iterations++;
				z = complez_square(z) + c;
			}
		}*/
		if(!done)
			discard;
		
		gl_FragColor.g = 0.8-mod(iterations,40.0) * 1.0/40.0/1.4;//MAX_IT_FLOAT;
		gl_FragColor.b = 0.1+mod(iterations,40.0)*1.0/40.0;//MAX_IT_FLOAT;
		
		//gl_FragColor = vec4((vTextureCoord.x+1.0)/2.0, (vTextureCoord.y+1.0)/2.0, 0.0, 1.0);
	}

</script>

<script id="shader-vs" type="x-shader/x-vertex">
	attribute vec3 aVertexPosition;
	attribute vec2 aTextureCoord;

	
	
	varying vec2 vTextureCoord;
	
	void main(void) {
		gl_Position = vec4(aVertexPosition, 1.0);
		vTextureCoord = aTextureCoord;
	}
</script>

<!--<script src="mat4.js"></script>-->

<script type="text/javascript">

	var gl;

	function initGL(canvas) {
		try {
			gl = canvas.getContext("experimental-webgl");
			gl.viewportWidth = canvas.width;
			gl.viewportHeight = canvas.height;
			
			window.addEventListener('resize', function(){
					console.log('resize viewport');
					gl.viewportWidth  = window.innerWidth;
					gl.viewportHeight = window.innerHeight;
				});
			
		} catch (e) {
		}
		if (!gl) {
			alert("Could not initialise WebGL, sorry :-(");
		}
	}


	function getShader(gl, id) {
		var shaderScript = document.getElementById(id);
		if (!shaderScript) {
			return null;
		}

		var str = "";
		var k = shaderScript.firstChild;
		while (k) {
			if (k.nodeType == 3) {
				str += k.textContent;
			}
			k = k.nextSibling;
		}

		var shader;
		if (shaderScript.type == "x-shader/x-fragment") {
			shader = gl.createShader(gl.FRAGMENT_SHADER);
		} else if (shaderScript.type == "x-shader/x-vertex") {
			shader = gl.createShader(gl.VERTEX_SHADER);
		} else {
			return null;
		}

		gl.shaderSource(shader, str);
		gl.compileShader(shader);

		if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
			alert(gl.getShaderInfoLog(shader));
			return null;
		}

		return shader;
	}


	var shaderProgram;

	function initShaders() {
		var fragmentShader = getShader(gl, "shader-fs");
		var vertexShader = getShader(gl, "shader-vs");

		shaderProgram = gl.createProgram();
		gl.attachShader(shaderProgram, vertexShader);
		gl.attachShader(shaderProgram, fragmentShader);
		gl.linkProgram(shaderProgram);

		if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
			alert("Could not initialise shaders");
		}

		gl.useProgram(shaderProgram);

		shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
		gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

		shaderProgram.vertexTexCoordAttribute = gl.getAttribLocation(shaderProgram, "aTextureCoord");
		gl.enableVertexAttribArray(shaderProgram.vertexTexCoordAttribute);
		
		
		shaderProgram.translateUniform = gl.getUniformLocation(shaderProgram, "uTranslate");
		shaderProgram.zoomUniform = gl.getUniformLocation(shaderProgram, "uZoom");
		shaderProgram.arUniform = gl.getUniformLocation(shaderProgram, "uAR");
		
	}

	

	
	

	/*var mMatrix = mat4.create();
	var vMatrix = mat4.create();
	var pMatrix = mat4.create();*/



	function setMatrixUniforms() {
		gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
		gl.uniformMatrix4fv(shaderProgram.vMatrixUniform, false, vMatrix);
		gl.uniformMatrix4fv(shaderProgram.mMatrixUniform, false, mMatrix);
	}


	function degToRad(degrees) {
		return degrees * Math.PI / 180;
	}


	var rttFramebuffer1;
	var rttTexture1;
	
	var rttFramebuffer2;
	var rttTexture2;

	
	function initTextureFramebuffer(framebuffer, texture) {
        framebuffer = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
        framebuffer.width = 512;
        framebuffer.height = 512;

        texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
        gl.generateMipmap(gl.TEXTURE_2D);

        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, framebuffer.width, framebuffer.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);

        var renderbuffer = gl.createRenderbuffer();
        gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, framebuffer.width, framebuffer.height);

        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);

        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.bindRenderbuffer(gl.RENDERBUFFER, null);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    }
	
	
	var mBuffer = {};
	
	/*
	zoom
	102400
	trans
	Array [ -0.7000000000000001, 0.2975 ]
	*/
	
	var trans = [-0.7, 0.2975];
	var zoom = 2.0;
	
	function testZoom()
	{
		zoom*=2;
		drawScene();
		return zoom;
	}
	
	function drawScene() {
		gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
		gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

		gl.uniform1f(shaderProgram.arUniform, gl.viewportWidth/ gl.viewportHeight);
		gl.uniform2f(shaderProgram.translateUniform, trans[0], trans[1]);
		gl.uniform1f(shaderProgram.zoomUniform, zoom);
		
		
		gl.bindBuffer(gl.ARRAY_BUFFER, mBuffer.verts);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, mBuffer.verts.itemSize, gl.FLOAT, false, 0, 0);

		
		
		// Bind texture and set sampler
	
	
		
		// Bind texCoord buffer
		gl.bindBuffer(gl.ARRAY_BUFFER, mBuffer.texCoords);
		
		gl.enableVertexAttribArray(shaderProgram.vertexTexCoordAttribute);
		gl.vertexAttribPointer(shaderProgram.vertexTexCoordAttribute, mBuffer.texCoords.itemSize, gl.FLOAT, false, 0, 0);
		
		// TODO + shader modification
		
	
		
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mBuffer.indices);
		gl.drawElements(gl.TRIANGLES, mBuffer.indices.numItems, gl.UNSIGNED_SHORT, 0);
		
		
	
		/*mat4.identity(pMatrix);
		mat4.identity(vMatrix);
		mat4.identity(mMatrix);*/
		

	}


	

	
	window.requestAnimFrame = (function() {
		return window.requestAnimationFrame ||
			window.webkitRequestAnimationFrame ||
			window.mozRequestAnimationFrame ||
			window.oRequestAnimationFrame ||
			window.msRequestAnimationFrame ||
			function(/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {
			window.setTimeout(callback, 1000/60);
			};
	})();
	
	function tick() {
		requestAnimFrame(tick);
		drawScene();
	}
	
	function handleMouseDown(e)
	{
		var canvas = document.getElementById("myCanvas");
		var x = e.clientX;
		var y = e.clientY;
		var ar = canvas.width/canvas.height;
		x = (2.0*x / canvas.width - 1.0);/**ar;*/
		y = -(2.0*y / canvas.height - 1.0);
		
		if(e.button == 0)
		{
			trans[0] += x/zoom;
			trans[1] += y/zoom;
			zoom*=1.41;
		}
		else
		{
			trans[0] += x/zoom;
			trans[1] += y/zoom;
			zoom/=1.41;
		}
		e.preventDefault();
	}
	
	function webGLStart() {
		var canvas = document.getElementById("myCanvas");
		initGL(canvas);
		initShaders();
		
		mBuffer.verts = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, mBuffer.verts);
		var vertices = [
			-1.0, -1.0,  0.0,
			-1.0,  1.0,  0.0,
			 1.0, -1.0,  0.0,
			 1.0,  1.0,  0.0
		];
		gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
		mBuffer.verts.itemSize = 3;
        mBuffer.verts.numItems = 4;
		
		mBuffer.texCoords = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, mBuffer.texCoords);
		var texCoords = [
			-1.0, -1.0,
			-1.0,  1.0,
			 1.0, -1.0,
			 1.0,  1.0
		];
		gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(texCoords), gl.STATIC_DRAW);
		
		
		mBuffer.texCoords.itemSize = 2;
        mBuffer.texCoords.numItems = 4;

        mBuffer.indices = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mBuffer.indices);
        var cubeVertexIndices = [
            0, 1, 2,
			2, 1, 3    // Front face
            
        ];
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);
        mBuffer.indices.itemSize = 1;
        mBuffer.indices.numItems = 6;
		
		gl.clearColor(0.0, 0.0, 0.0, 1.0);
		
		canvas.addEventListener("mousedown", handleMouseDown, true);
		window.addEventListener("onContextMenu", function(event){ event.preventDefault(); return false;}, false);
		tick();
	}

</script>

</head>
<body onload="webGLStart();" oncontextmenu="return false;" style="margin:0">
<canvas id="myCanvas" width=100 height=100 style="width:100%; height:100%;"> </canvas>

<script>
function resize()
{
	console.log('resize canvas');
	var canvas = document.getElementById('myCanvas');
	canvas.height = window.innerHeight;
	canvas.width = window.innerWidth;
	
	
}

resize();

window.addEventListener('resize', resize);


</script>
</body>
</html>